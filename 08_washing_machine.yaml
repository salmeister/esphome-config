substitutions:
  devicename: washing-machine
  fullname: "Washing Machine"
  ipPrefix:  !secret ip_prefix
  id: "8"

<<: !include base.yaml

# Configuration for TGWF115PQM (Small 10A plug)

esphome:
  name: ${devicename}
  platform: ESP8266
  board: esp01_1m
  includes:
    - espsense.h
  # Uses the ESPAsyncUDP library
  libraries:
    - "ESPAsyncUDP"
    - "ArduinoJson-esphomelib@5.13.3"

time:
  - platform: homeassistant
    id: homeassistant_time
    
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO3
      inverted: True
    id: button
    internal: true
    on_press:
      then:
        - switch.toggle: relay
        # Note that blue LED appears to be tied to relay state internally (i.e. electrically)
  - platform: template
    name: "${fullname} Status"
    filters:
      - delayed_on: 240s
      - delayed_off: 120s
    lambda: |-
      if (isnan(id(wattage).state)) {
        return {};
      } else if (id(wattage).state > 3) {
        return true;
      } else {
        return false;
      }
    
switch:
  # Main plug control relay
  - platform: gpio
    internal: true
    id: relay
    pin: GPIO14
    restore_mode: ALWAYS_ON
    
  # Used for Status LED below, but could be repurposed!
  # - platform: gpio
  #   name: "${name} Green LED"
  #   id: "led_green"
  #   pin: GPIO13
  #   restore_mode: ALWAYS_ON
  
status_led:
  # Use Green LED as ESPHome's built-in status indicator
  pin:
    number: GPIO13
    inverted: False

sensor:
  - platform: hlw8012
    sel_pin:
      number: GPIO12
      inverted: True
    cf_pin: GPIO04
    cf1_pin: GPIO5
    current_resistor: "0.00228"
    voltage_divider: "2120"
    current:
      name: "${fullname} Amperage"
      id: amperage
      unit_of_measurement: A
      icon: "mdi:lightning-bolt-circle"
      accuracy_decimals: 3
      filters:
        # - calibrate_linear:
        #   # Map X (from sensor) to Y (true value)
        #   # At least 2 data points required
        #   - 0.0 -> 0.0
        #   - 1.0 -> 1.0 #load was on
        # Make everything below 0.02A appear as just 0A.
        # Furthermore it corrects for the power usage of the plug.
        - lambda: if (x < (0.01 + 0.01)) return 0; else return (x - 0.01);
    voltage:
      name: "${fullname} Voltage"
      id: voltage
      unit_of_measurement: V
      icon: "mdi:lightning-bolt-circle"
      accuracy_decimals: 1
      filters:
        # - calibrate_linear:
        #   # Map X (from sensor) to Y (true value)
        #   # At least 2 data points required
        #   - 0.0 -> 0.0
        #   - 1.0 -> 1.0 #load was on
    power:
      name: "${fullname} Wattage"
      unit_of_measurement: W
      icon: "mdi:lightning-bolt-circle"
      id: wattage
      accuracy_decimals: 0
      filters:
        # Moving average filter to try and reduce a periodic drop of ~1-2W
        # Unsure of cause, may be a better solution!
        #- sliding_window_moving_average:
        #    window_size: 2
        #    send_every: 1
        # Map from sensor -> measured value
        - calibrate_linear:
         # Map X (from sensor) to Y (true value)
         # At least 2 data points required
          - 1097 -> 1106
          - 591 -> 596
          - 87.6 -> 89.5
          - 1621 -> 1629
          - 1155 -> 1155
          - 143 -> 143
        # Make everything below 1W appear as just 0W.
        # Furthermore it corrects for the power usage of the plug.
        - lambda: if (x < (1 + 1)) return 0; else return (x - 1);
    update_interval: 10s
    
  - platform: total_daily_energy
    name: "${fullname} Total Daily Energy"
    internal: true
    power_id: wattage
    filters:
        # Multiplication factor from W to kW is 0.001
        - multiply: 0.001
    unit_of_measurement: kWh

# Extra sensor to keep track of plug uptime
  - platform: uptime
    internal: true
    name: ${fullname} Uptime Sensor
    
